node {
  name: "inputs/normalize_element/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inputs/TensorDataset"
  op: "TensorDataset"
  input: "inputs/normalize_element/component_0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "inputs/FlatMapDataset"
  op: "FlatMapDataset"
  input: "inputs/TensorDataset"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_flat_map_flat_map_fn_26"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "inputs/count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "inputs/RepeatDataset"
  op: "RepeatDataset"
  input: "inputs/FlatMapDataset"
  input: "inputs/count"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "inputs/buffer_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 512
      }
    }
  }
}
node {
  name: "inputs/seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "inputs/seed2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "inputs/ShuffleDataset"
  op: "ShuffleDataset"
  input: "inputs/RepeatDataset"
  input: "inputs/buffer_size"
  input: "inputs/seed"
  input: "inputs/seed2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "inputs/batch_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 64
      }
    }
  }
}
node {
  name: "inputs/drop_remainder"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "inputs/BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "inputs/ShuffleDataset"
  input: "inputs/batch_size"
  input: "inputs/drop_remainder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_DyWsUD1FZwI"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "inputs_1/normalize_element/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "inputs_1/TensorDataset"
  op: "TensorDataset"
  input: "inputs_1/normalize_element/component_0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "inputs_1/FlatMapDataset"
  op: "FlatMapDataset"
  input: "inputs_1/TensorDataset"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_flat_map_flat_map_fn_83"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "inputs_1/count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "inputs_1/RepeatDataset"
  op: "RepeatDataset"
  input: "inputs_1/FlatMapDataset"
  input: "inputs_1/count"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "inputs_1/buffer_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 512
      }
    }
  }
}
node {
  name: "inputs_1/seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "inputs_1/seed2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "inputs_1/ShuffleDataset"
  op: "ShuffleDataset"
  input: "inputs_1/RepeatDataset"
  input: "inputs_1/buffer_size"
  input: "inputs_1/seed"
  input: "inputs_1/seed2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "inputs_1/batch_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 64
      }
    }
  }
}
node {
  name: "inputs_1/drop_remainder"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "inputs_1/BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "inputs_1/ShuffleDataset"
  input: "inputs_1/batch_size"
  input: "inputs_1/drop_remainder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "OneShotIterator_1"
  op: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_e0RaFbPjm6s"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle_1"
  op: "IteratorToStringHandle"
  input: "OneShotIterator_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext_1"
  op: "IteratorGetNext"
  input: "OneShotIterator_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "is_training/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "is_training"
  op: "PlaceholderWithDefault"
  input: "is_training/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "img"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "q"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 11
        }
      }
    }
  }
}
node {
  name: "a"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "img"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/w/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "Classifier/conv_1/w/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_1/w/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "Classifier/conv_1/w/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Classifier/conv_1/w/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Classifier/conv_1/w/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Classifier/conv_1/w/Initializer/truncated_normal/TruncatedNormal"
  input: "Classifier/conv_1/w/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/w/Initializer/truncated_normal"
  op: "Add"
  input: "Classifier/conv_1/w/Initializer/truncated_normal/mul"
  input: "Classifier/conv_1/w/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/w"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_1/w/Assign"
  op: "Assign"
  input: "Classifier/conv_1/w"
  input: "Classifier/conv_1/w/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_1/w/read"
  op: "Identity"
  input: "Classifier/conv_1/w"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/Conv2D"
  op: "Conv2D"
  input: "truediv"
  input: "Classifier/conv_1/w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_1/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_1/biases/Assign"
  op: "Assign"
  input: "Classifier/conv_1/biases"
  input: "Classifier/conv_1/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_1/biases/read"
  op: "Identity"
  input: "Classifier/conv_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/add"
  op: "AddV2"
  input: "Classifier/conv_1/Conv2D"
  input: "Classifier/conv_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/Relu"
  op: "Relu"
  input: "Classifier/conv_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Classifier/conv_1/BatchNorm/beta"
  input: "Classifier/conv_1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/beta/read"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "Classifier/conv_1/BatchNorm/gamma"
  input: "Classifier/conv_1/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/gamma/read"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Classifier/conv_1/BatchNorm/moving_mean"
  input: "Classifier/conv_1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Classifier/conv_1/BatchNorm/moving_variance"
  input: "Classifier/conv_1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/Switch"
  op: "Switch"
  input: "is_training"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/Const"
  op: "Const"
  input: "^Classifier/conv_1/BatchNorm/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Classifier/conv_1/BatchNorm/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch:1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_1:1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_2:1"
  input: "Classifier/conv_1/BatchNorm/cond/Const"
  input: "Classifier/conv_1/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch"
  op: "Switch"
  input: "Classifier/conv_1/Relu"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_1"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/gamma/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_2"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/beta/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1"
  op: "FusedBatchNormV3"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  op: "Switch"
  input: "Classifier/conv_1/Relu"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/gamma/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/beta/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/moving_mean/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/moving_variance/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1:1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1:2"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "is_training"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Classifier/conv_1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/moving_mean/read"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/cond/Merge_1"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/cond/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Classifier/conv_1/BatchNorm/moving_mean"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Classifier/conv_1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/moving_variance/read"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/cond/Merge_2"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/cond/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Classifier/conv_1/BatchNorm/moving_variance"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Classifier/conv_1/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Classifier/conv_1/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/cond/Merge"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/cond/Merge"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_1/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Classifier/conv_1/BatchNorm/cond_1/Switch_1"
  input: "Classifier/conv_1/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/w/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\030\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "Classifier/conv_2/w/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_2/w/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "Classifier/conv_2/w/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Classifier/conv_2/w/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Classifier/conv_2/w/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Classifier/conv_2/w/Initializer/truncated_normal/TruncatedNormal"
  input: "Classifier/conv_2/w/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/w/Initializer/truncated_normal"
  op: "Add"
  input: "Classifier/conv_2/w/Initializer/truncated_normal/mul"
  input: "Classifier/conv_2/w/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/w"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 24
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_2/w/Assign"
  op: "Assign"
  input: "Classifier/conv_2/w"
  input: "Classifier/conv_2/w/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_2/w/read"
  op: "Identity"
  input: "Classifier/conv_2/w"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/Conv2D"
  op: "Conv2D"
  input: "Classifier/conv_1/BatchNorm/cond_1/Merge"
  input: "Classifier/conv_2/w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_2/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_2/biases/Assign"
  op: "Assign"
  input: "Classifier/conv_2/biases"
  input: "Classifier/conv_2/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_2/biases/read"
  op: "Identity"
  input: "Classifier/conv_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/add"
  op: "AddV2"
  input: "Classifier/conv_2/Conv2D"
  input: "Classifier/conv_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/Relu"
  op: "Relu"
  input: "Classifier/conv_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Classifier/conv_2/BatchNorm/beta"
  input: "Classifier/conv_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/beta/read"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "Classifier/conv_2/BatchNorm/gamma"
  input: "Classifier/conv_2/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/gamma/read"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Classifier/conv_2/BatchNorm/moving_mean"
  input: "Classifier/conv_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Classifier/conv_2/BatchNorm/moving_variance"
  input: "Classifier/conv_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/Switch"
  op: "Switch"
  input: "is_training"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/Const"
  op: "Const"
  input: "^Classifier/conv_2/BatchNorm/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Classifier/conv_2/BatchNorm/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch:1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_1:1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_2:1"
  input: "Classifier/conv_2/BatchNorm/cond/Const"
  input: "Classifier/conv_2/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch"
  op: "Switch"
  input: "Classifier/conv_2/Relu"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_1"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/gamma/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_2"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/beta/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1"
  op: "FusedBatchNormV3"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  op: "Switch"
  input: "Classifier/conv_2/Relu"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/gamma/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/beta/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/moving_mean/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/moving_variance/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1:1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1:2"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "is_training"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Classifier/conv_2/BatchNorm/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/moving_mean/read"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/cond/Merge_1"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/cond/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Classifier/conv_2/BatchNorm/moving_mean"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Classifier/conv_2/BatchNorm/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/moving_variance/read"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/cond/Merge_2"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/cond/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Classifier/conv_2/BatchNorm/moving_variance"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Classifier/conv_2/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Classifier/conv_2/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/cond/Merge"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/cond/Merge"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_2/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Classifier/conv_2/BatchNorm/cond_1/Switch_1"
  input: "Classifier/conv_2/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/w/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\030\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "Classifier/conv_3/w/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_3/w/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "Classifier/conv_3/w/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Classifier/conv_3/w/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Classifier/conv_3/w/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Classifier/conv_3/w/Initializer/truncated_normal/TruncatedNormal"
  input: "Classifier/conv_3/w/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/w/Initializer/truncated_normal"
  op: "Add"
  input: "Classifier/conv_3/w/Initializer/truncated_normal/mul"
  input: "Classifier/conv_3/w/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/w"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 24
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_3/w/Assign"
  op: "Assign"
  input: "Classifier/conv_3/w"
  input: "Classifier/conv_3/w/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_3/w/read"
  op: "Identity"
  input: "Classifier/conv_3/w"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/Conv2D"
  op: "Conv2D"
  input: "Classifier/conv_2/BatchNorm/cond_1/Merge"
  input: "Classifier/conv_3/w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_3/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_3/biases/Assign"
  op: "Assign"
  input: "Classifier/conv_3/biases"
  input: "Classifier/conv_3/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_3/biases/read"
  op: "Identity"
  input: "Classifier/conv_3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/add"
  op: "AddV2"
  input: "Classifier/conv_3/Conv2D"
  input: "Classifier/conv_3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/Relu"
  op: "Relu"
  input: "Classifier/conv_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Classifier/conv_3/BatchNorm/beta"
  input: "Classifier/conv_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/beta/read"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "Classifier/conv_3/BatchNorm/gamma"
  input: "Classifier/conv_3/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/gamma/read"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Classifier/conv_3/BatchNorm/moving_mean"
  input: "Classifier/conv_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Classifier/conv_3/BatchNorm/moving_variance"
  input: "Classifier/conv_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/Switch"
  op: "Switch"
  input: "is_training"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/Const"
  op: "Const"
  input: "^Classifier/conv_3/BatchNorm/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Classifier/conv_3/BatchNorm/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch:1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_1:1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_2:1"
  input: "Classifier/conv_3/BatchNorm/cond/Const"
  input: "Classifier/conv_3/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch"
  op: "Switch"
  input: "Classifier/conv_3/Relu"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_1"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/gamma/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_2"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/beta/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1"
  op: "FusedBatchNormV3"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  op: "Switch"
  input: "Classifier/conv_3/Relu"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/gamma/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/beta/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/moving_mean/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/moving_variance/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1:1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1:2"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "is_training"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Classifier/conv_3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/moving_mean/read"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/cond/Merge_1"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/cond/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Classifier/conv_3/BatchNorm/moving_mean"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Classifier/conv_3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/moving_variance/read"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/cond/Merge_2"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/cond/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Classifier/conv_3/BatchNorm/moving_variance"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Classifier/conv_3/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Classifier/conv_3/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/cond/Merge"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/cond/Merge"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/conv_3/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Classifier/conv_3/BatchNorm/cond_1/Switch_1"
  input: "Classifier/conv_3/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "@\000\000\000\004\000\000\000\004\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "Classifier/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Classifier/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Classifier/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Classifier/strided_slice"
  op: "StridedSlice"
  input: "Classifier/Shape"
  input: "Classifier/strided_slice/stack"
  input: "Classifier/strided_slice/stack_1"
  input: "Classifier/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Classifier/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Classifier/Reshape/shape"
  op: "Pack"
  input: "Classifier/strided_slice"
  input: "Classifier/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Classifier/Reshape"
  op: "Reshape"
  input: "Classifier/conv_3/BatchNorm/cond_1/Merge"
  input: "Classifier/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Classifier/concat"
  op: "ConcatV2"
  input: "Classifier/Reshape"
  input: "q"
  input: "Classifier/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 395
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\213\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09600307047367096
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09600307047367096
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Classifier/fully_connected/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Classifier/fully_connected/weights/Initializer/random_uniform/max"
  input: "Classifier/fully_connected/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Classifier/fully_connected/weights/Initializer/random_uniform/RandomUniform"
  input: "Classifier/fully_connected/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/Initializer/random_uniform"
  op: "Add"
  input: "Classifier/fully_connected/weights/Initializer/random_uniform/mul"
  input: "Classifier/fully_connected/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 395
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/Assign"
  op: "Assign"
  input: "Classifier/fully_connected/weights"
  input: "Classifier/fully_connected/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/fully_connected/weights/read"
  op: "Identity"
  input: "Classifier/fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/fully_connected/biases/Assign"
  op: "Assign"
  input: "Classifier/fully_connected/biases"
  input: "Classifier/fully_connected/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/fully_connected/biases/read"
  op: "Identity"
  input: "Classifier/fully_connected/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected/MatMul"
  op: "MatMul"
  input: "Classifier/concat"
  input: "Classifier/fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "Classifier/fully_connected/MatMul"
  input: "Classifier/fully_connected/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Classifier/fully_connected/Relu"
  op: "Relu"
  input: "Classifier/fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10825317353010178
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10825317353010178
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Classifier/fully_connected_1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Classifier/fully_connected_1/weights/Initializer/random_uniform/max"
  input: "Classifier/fully_connected_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Classifier/fully_connected_1/weights/Initializer/random_uniform/RandomUniform"
  input: "Classifier/fully_connected_1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/Initializer/random_uniform"
  op: "Add"
  input: "Classifier/fully_connected_1/weights/Initializer/random_uniform/mul"
  input: "Classifier/fully_connected_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/Assign"
  op: "Assign"
  input: "Classifier/fully_connected_1/weights"
  input: "Classifier/fully_connected_1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/fully_connected_1/weights/read"
  op: "Identity"
  input: "Classifier/fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/fully_connected_1/biases/Assign"
  op: "Assign"
  input: "Classifier/fully_connected_1/biases"
  input: "Classifier/fully_connected_1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/fully_connected_1/biases/read"
  op: "Identity"
  input: "Classifier/fully_connected_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_1/MatMul"
  op: "MatMul"
  input: "Classifier/fully_connected/Relu"
  input: "Classifier/fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "Classifier/fully_connected_1/MatMul"
  input: "Classifier/fully_connected_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Classifier/fully_connected_1/Relu"
  op: "Relu"
  input: "Classifier/fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/Switch"
  op: "Switch"
  input: "is_training"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/switch_t"
  op: "Identity"
  input: "fc_3/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/switch_f"
  op: "Identity"
  input: "fc_3/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/pred_id"
  op: "Identity"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/rate"
  op: "Const"
  input: "^fc_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/Shape"
  op: "Const"
  input: "^fc_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^fc_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^fc_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "fc_3/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fc_3/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "fc_3/cond/dropout/random_uniform/max"
  input: "fc_3/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "fc_3/cond/dropout/random_uniform/RandomUniform"
  input: "fc_3/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/random_uniform"
  op: "Add"
  input: "fc_3/cond/dropout/random_uniform/mul"
  input: "fc_3/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/sub/x"
  op: "Const"
  input: "^fc_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/sub"
  op: "Sub"
  input: "fc_3/cond/dropout/sub/x"
  input: "fc_3/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/truediv/x"
  op: "Const"
  input: "^fc_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/truediv"
  op: "RealDiv"
  input: "fc_3/cond/dropout/truediv/x"
  input: "fc_3/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "fc_3/cond/dropout/random_uniform"
  input: "fc_3/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/mul"
  op: "Mul"
  input: "fc_3/cond/dropout/mul/Switch:1"
  input: "fc_3/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/mul/Switch"
  op: "Switch"
  input: "Classifier/fully_connected_1/Relu"
  input: "fc_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/Cast"
  op: "Cast"
  input: "fc_3/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/dropout/mul_1"
  op: "Mul"
  input: "fc_3/cond/dropout/mul"
  input: "fc_3/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/Identity"
  op: "Identity"
  input: "fc_3/cond/Identity/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/Identity/Switch"
  op: "Switch"
  input: "Classifier/fully_connected_1/Relu"
  input: "fc_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fc_3/cond/Merge"
  op: "Merge"
  input: "fc_3/cond/Identity"
  input: "fc_3/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.15018784999847412
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.15018784999847412
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Classifier/fully_connected_2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Classifier/fully_connected_2/weights/Initializer/random_uniform/max"
  input: "Classifier/fully_connected_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Classifier/fully_connected_2/weights/Initializer/random_uniform/RandomUniform"
  input: "Classifier/fully_connected_2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/Initializer/random_uniform"
  op: "Add"
  input: "Classifier/fully_connected_2/weights/Initializer/random_uniform/mul"
  input: "Classifier/fully_connected_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/Assign"
  op: "Assign"
  input: "Classifier/fully_connected_2/weights"
  input: "Classifier/fully_connected_2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/fully_connected_2/weights/read"
  op: "Identity"
  input: "Classifier/fully_connected_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Classifier/fully_connected_2/biases/Assign"
  op: "Assign"
  input: "Classifier/fully_connected_2/biases"
  input: "Classifier/fully_connected_2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Classifier/fully_connected_2/biases/read"
  op: "Identity"
  input: "Classifier/fully_connected_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "Classifier/fully_connected_2/MatMul"
  op: "MatMul"
  input: "fc_3/cond/Merge"
  input: "Classifier/fully_connected_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Classifier/fully_connected_2/BiasAdd"
  op: "BiasAdd"
  input: "Classifier/fully_connected_2/MatMul"
  input: "Classifier/fully_connected_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/labels_stop_gradient"
  op: "StopGradient"
  input: "a"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits_sg/Rank_1"
  input: "softmax_cross_entropy_with_logits_sg/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice/begin"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits_sg/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits_sg/Shape_1"
  input: "softmax_cross_entropy_with_logits_sg/Slice/begin"
  input: "softmax_cross_entropy_with_logits_sg/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat"
  op: "ConcatV2"
  input: "softmax_cross_entropy_with_logits_sg/concat/values_0"
  input: "softmax_cross_entropy_with_logits_sg/Slice"
  input: "softmax_cross_entropy_with_logits_sg/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Reshape"
  op: "Reshape"
  input: "Classifier/fully_connected_2/BiasAdd"
  input: "softmax_cross_entropy_with_logits_sg/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Rank_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub_1"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits_sg/Rank_2"
  input: "softmax_cross_entropy_with_logits_sg/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_1/begin"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits_sg/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_1"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits_sg/Shape_2"
  input: "softmax_cross_entropy_with_logits_sg/Slice_1/begin"
  input: "softmax_cross_entropy_with_logits_sg/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat_1"
  op: "ConcatV2"
  input: "softmax_cross_entropy_with_logits_sg/concat_1/values_0"
  input: "softmax_cross_entropy_with_logits_sg/Slice_1"
  input: "softmax_cross_entropy_with_logits_sg/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Reshape_1"
  op: "Reshape"
  input: "softmax_cross_entropy_with_logits_sg/labels_stop_gradient"
  input: "softmax_cross_entropy_with_logits_sg/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "softmax_cross_entropy_with_logits_sg/Reshape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub_2"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits_sg/Rank"
  input: "softmax_cross_entropy_with_logits_sg/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_2/size"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits_sg/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_2"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits_sg/Shape"
  input: "softmax_cross_entropy_with_logits_sg/Slice_2/begin"
  input: "softmax_cross_entropy_with_logits_sg/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  op: "Reshape"
  input: "softmax_cross_entropy_with_logits_sg"
  input: "softmax_cross_entropy_with_logits_sg/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "Classifier/fully_connected_2/BiasAdd"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "a"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ArgMax"
  input: "ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "Cast"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Softmax"
  op: "Softmax"
  input: "Classifier/fully_connected_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy"
      }
    }
  }
}
node {
  name: "accuracy"
  op: "ScalarSummary"
  input: "accuracy/tags"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
}
node {
  name: "optimizer_loss/learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "optimizer_loss/learning_rate"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/learning_rate/Assign"
  op: "Assign"
  input: "optimizer_loss/learning_rate"
  input: "optimizer_loss/learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/learning_rate/read"
  op: "Identity"
  input: "optimizer_loss/learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Fill"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape"
  input: "optimizer_loss/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "optimizer_loss/gradients/Fill"
  input: "optimizer_loss/gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Mean_grad/Tile"
  op: "Tile"
  input: "optimizer_loss/gradients/Mean_grad/Reshape"
  input: "optimizer_loss/gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 64.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "optimizer_loss/gradients/Mean_grad/Tile"
  input: "optimizer_loss/gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "optimizer_loss/gradients/Mean_grad/truediv"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like"
  op: "ZerosLike"
  input: "softmax_cross_entropy_with_logits_sg:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims"
  op: "ExpandDims"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/mul"
  op: "Mul"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims"
  input: "softmax_cross_entropy_with_logits_sg:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/LogSoftmax"
  op: "LogSoftmax"
  input: "softmax_cross_entropy_with_logits_sg/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/Neg"
  op: "Neg"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/LogSoftmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/mul_1"
  op: "Mul"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/mul"
  input: "^optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/mul_1"
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/mul"
  input: "^optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/mul_1"
  input: "^optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
  op: "Reshape"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/control_dependency"
  input: "Classifier/fully_connected_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fc_3/cond/Merge"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/control_dependency"
  input: "fc_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/fc_3/cond/Merge_grad/cond_grad"
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/fc_3/cond/Merge_grad/cond_grad"
  input: "^optimizer_loss/gradients/fc_3/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/fc_3/cond/Merge_grad/cond_grad:1"
  input: "^optimizer_loss/gradients/fc_3/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "optimizer_loss/gradients/fc_3/cond/Merge_grad/tuple/control_dependency_1"
  input: "fc_3/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "optimizer_loss/gradients/fc_3/cond/Merge_grad/tuple/control_dependency_1"
  input: "fc_3/cond/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/Mul"
  input: "^optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/Mul_1"
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/Mul"
  input: "^optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/Mul_1"
  input: "^optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch"
  op: "Switch"
  input: "Classifier/fully_connected_1/Relu"
  input: "fc_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_1"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_1"
  input: "optimizer_loss/gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/fc_3/cond/Merge_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/BroadcastGradientArgs/s0"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Mul"
  op: "Mul"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/tuple/control_dependency"
  input: "fc_3/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "fc_3/cond/dropout/mul/Switch:1"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Sum"
  op: "Sum"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Mul_1"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Sum"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Mul"
  input: "^optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Reshape"
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Mul"
  input: "^optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Reshape"
  input: "^optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_1"
  op: "Switch"
  input: "Classifier/fully_connected_1/Relu"
  input: "fc_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_2"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_1/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_1"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_2"
  input: "optimizer_loss/gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/fc_3/cond/dropout/mul/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_1"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN"
  op: "AddN"
  input: "optimizer_loss/gradients/fc_3/cond/Identity/Switch_grad/cond_grad"
  input: "optimizer_loss/gradients/fc_3/cond/dropout/mul/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/fc_3/cond/Identity/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer_loss/gradients/AddN"
  input: "Classifier/fully_connected_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_1/Relu_grad/ReluGrad"
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/Relu_grad/ReluGrad"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "Classifier/fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Classifier/fully_connected/Relu"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "Classifier/fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer_loss/gradients/Classifier/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer_loss/gradients/Classifier/fully_connected/Relu_grad/ReluGrad"
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected/Relu_grad/ReluGrad"
  input: "^optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "Classifier/fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 395
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Classifier/concat"
  input: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul"
  input: "^optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul"
  input: "^optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 395
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
  input: "^optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/mod"
  op: "FloorMod"
  input: "Classifier/concat/axis"
  input: "optimizer_loss/gradients/Classifier/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\013\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "optimizer_loss/gradients/Classifier/concat_grad/mod"
  input: "optimizer_loss/gradients/Classifier/concat_grad/Shape"
  input: "optimizer_loss/gradients/Classifier/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/Slice"
  op: "Slice"
  input: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/Classifier/concat_grad/ConcatOffset"
  input: "optimizer_loss/gradients/Classifier/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/Slice_1"
  op: "Slice"
  input: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/Classifier/concat_grad/ConcatOffset:1"
  input: "optimizer_loss/gradients/Classifier/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/concat_grad/Slice"
  input: "^optimizer_loss/gradients/Classifier/concat_grad/Slice_1"
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/concat_grad/Slice"
  input: "^optimizer_loss/gradients/Classifier/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/concat_grad/Slice_1"
  input: "^optimizer_loss/gradients/Classifier/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "@\000\000\000\004\000\000\000\004\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/Reshape_grad/Reshape"
  op: "Reshape"
  input: "optimizer_loss/gradients/Classifier/concat_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/Classifier/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "optimizer_loss/gradients/Classifier/Reshape_grad/Reshape"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_2"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/cond/Merge"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_2"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_3"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_2/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_2"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_3"
  input: "optimizer_loss/gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/zeros_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_3"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/cond/Merge"
  input: "Classifier/conv_3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_3"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_4"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_3/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_3"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_4"
  input: "optimizer_loss/gradients/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_3"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_1"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "optimizer_loss/gradients/AddN_1"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_10"
  op: "ZerosLike"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch:1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_1:1"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:3"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:4"
  input: "Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:3"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:4"
  input: "^optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_4"
  op: "Switch"
  input: "Classifier/conv_3/Relu"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_4"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_5"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_4/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_4"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_5"
  input: "optimizer_loss/gradients/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/zeros_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_5"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/gamma/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_5"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_6"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_5/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_5"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_6"
  input: "optimizer_loss/gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_1"
  input: "optimizer_loss/gradients/zeros_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_6"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/beta/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_6"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_7"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_6/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_6"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_7"
  input: "optimizer_loss/gradients/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_2"
  input: "optimizer_loss/gradients/zeros_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_7"
  op: "Switch"
  input: "Classifier/conv_3/Relu"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_7"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_8"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_7/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_7"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_8"
  input: "optimizer_loss/gradients/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_7"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_8"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/gamma/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_8"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_9"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_8/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_8"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_9"
  input: "optimizer_loss/gradients/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_8"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_9"
  op: "Switch"
  input: "Classifier/conv_3/BatchNorm/beta/read"
  input: "Classifier/conv_3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_9"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_10"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_9/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_9"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_10"
  input: "optimizer_loss/gradients/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_9"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_2"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer_loss/gradients/AddN_2"
  input: "Classifier/conv_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_3"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_4"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "@\000\000\000\004\000\000\000\004\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/BroadcastGradientArgs/s0"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/Sum"
  op: "Sum"
  input: "optimizer_loss/gradients/Classifier/conv_3/Relu_grad/ReluGrad"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
  op: "Reshape"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/Sum"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_3/Relu_grad/ReluGrad"
  input: "^optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/Relu_grad/ReluGrad"
  input: "^optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
  input: "^optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Classifier/conv_2/BatchNorm/cond_1/Merge"
  input: "Classifier/conv_3/w/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/ShapeN"
  input: "Classifier/conv_3/w/read"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Classifier/conv_2/BatchNorm/cond_1/Merge"
  input: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/ShapeN:1"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropInput"
  input: "^optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/control_dependency"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_10"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/cond/Merge"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_10"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_10:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_11"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_10:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_10/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_10"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_11"
  input: "optimizer_loss/gradients/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/zeros_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_11"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/cond/Merge"
  input: "Classifier/conv_2/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_11"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_12"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_11/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_11"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_11"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_12"
  input: "optimizer_loss/gradients/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_11"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_5"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "optimizer_loss/gradients/AddN_5"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_11"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_12"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_13"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_14"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_15"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_16"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_17"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_18"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_19"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_20"
  op: "ZerosLike"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch:1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_1:1"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:3"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:4"
  input: "Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:3"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:4"
  input: "^optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_12"
  op: "Switch"
  input: "Classifier/conv_2/Relu"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_12"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_12:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_13"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_12:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_12/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_12"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_12"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_13"
  input: "optimizer_loss/gradients/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/zeros_12"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_13"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/gamma/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_13"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_13:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_14"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_13:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_13/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_13"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_13"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_14"
  input: "optimizer_loss/gradients/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_1"
  input: "optimizer_loss/gradients/zeros_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_14"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/beta/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_14"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_14:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_15"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_14:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_14/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_14"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_14"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_15"
  input: "optimizer_loss/gradients/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_2"
  input: "optimizer_loss/gradients/zeros_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_15"
  op: "Switch"
  input: "Classifier/conv_2/Relu"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_15"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_16"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_15/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_15"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_15"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_16"
  input: "optimizer_loss/gradients/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_15"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_16"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/gamma/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_16"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_17"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_16/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_16"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_16"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_17"
  input: "optimizer_loss/gradients/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_16"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_17"
  op: "Switch"
  input: "Classifier/conv_2/BatchNorm/beta/read"
  input: "Classifier/conv_2/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_17"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_18"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_17/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_17"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_17"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_18"
  input: "optimizer_loss/gradients/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_17"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_6"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer_loss/gradients/AddN_6"
  input: "Classifier/conv_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_7"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_8"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "@\000\000\000\010\000\000\000\010\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/BroadcastGradientArgs/s0"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/Sum"
  op: "Sum"
  input: "optimizer_loss/gradients/Classifier/conv_2/Relu_grad/ReluGrad"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
  op: "Reshape"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/Sum"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_2/Relu_grad/ReluGrad"
  input: "^optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/Relu_grad/ReluGrad"
  input: "^optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
  input: "^optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Classifier/conv_1/BatchNorm/cond_1/Merge"
  input: "Classifier/conv_2/w/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/ShapeN"
  input: "Classifier/conv_2/w/read"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Classifier/conv_1/BatchNorm/cond_1/Merge"
  input: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/ShapeN:1"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_18"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/cond/Merge"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_18"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_18:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_19"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_18:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_18/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_18"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_18"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_19"
  input: "optimizer_loss/gradients/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/zeros_18"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_19"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/cond/Merge"
  input: "Classifier/conv_1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_19"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_20"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_19/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_19"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_19"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_20"
  input: "optimizer_loss/gradients/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_19"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_9"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "optimizer_loss/gradients/AddN_9"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_21"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_22"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_23"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_24"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_25"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_3"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_4"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:1"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3:2"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_26"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_27"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_28"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_29"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_like_30"
  op: "ZerosLike"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch:1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_1:1"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:3"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:4"
  input: "Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:3"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3:4"
  input: "^optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_20"
  op: "Switch"
  input: "Classifier/conv_1/Relu"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_20"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_20:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_21"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_20:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_20/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_20"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_20"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_21"
  input: "optimizer_loss/gradients/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency"
  input: "optimizer_loss/gradients/zeros_20"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_21"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/gamma/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_21"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_21:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_22"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_21:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_21/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_21"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_21"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_22"
  input: "optimizer_loss/gradients/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_1"
  input: "optimizer_loss/gradients/zeros_21"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_22"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/beta/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_22"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_22:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_23"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_22:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_22/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_22"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_22"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_23"
  input: "optimizer_loss/gradients/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1_grad/tuple/control_dependency_2"
  input: "optimizer_loss/gradients/zeros_22"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_23"
  op: "Switch"
  input: "Classifier/conv_1/Relu"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_23"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_24"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_23/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_23"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_23"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_24"
  input: "optimizer_loss/gradients/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_23"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_24"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/gamma/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_24"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_25"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_24/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_24"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_24"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_25"
  input: "optimizer_loss/gradients/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_24"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Switch_25"
  op: "Switch"
  input: "Classifier/conv_1/BatchNorm/beta/read"
  input: "Classifier/conv_1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Identity_25"
  op: "Identity"
  input: "optimizer_loss/gradients/Switch_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Shape_26"
  op: "Shape"
  input: "optimizer_loss/gradients/Switch_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_25/Const"
  op: "Const"
  input: "^optimizer_loss/gradients/Identity_25"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/zeros_25"
  op: "Fill"
  input: "optimizer_loss/gradients/Shape_26"
  input: "optimizer_loss/gradients/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "optimizer_loss/gradients/zeros_25"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_10"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer_loss/gradients/AddN_10"
  input: "Classifier/conv_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_11"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/AddN_12"
  op: "AddN"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
  input: "optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "@\000\000\000\020\000\000\000\020\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/BroadcastGradientArgs/s0"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/Sum"
  op: "Sum"
  input: "optimizer_loss/gradients/Classifier/conv_1/Relu_grad/ReluGrad"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
  op: "Reshape"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/Sum"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_1/Relu_grad/ReluGrad"
  input: "^optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/Relu_grad/ReluGrad"
  input: "^optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
  input: "^optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "truediv"
  input: "Classifier/conv_1/w/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/ShapeN"
  input: "Classifier/conv_1/w/read"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "truediv"
  input: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/ShapeN:1"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_4"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_5"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_6"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_7"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_8"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_9"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_10"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_11"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_12"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_13"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_14"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_15"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_16"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/L2Loss_17"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/stack"
  op: "Pack"
  input: "optimizer_loss/global_norm/L2Loss"
  input: "optimizer_loss/global_norm/L2Loss_1"
  input: "optimizer_loss/global_norm/L2Loss_2"
  input: "optimizer_loss/global_norm/L2Loss_3"
  input: "optimizer_loss/global_norm/L2Loss_4"
  input: "optimizer_loss/global_norm/L2Loss_5"
  input: "optimizer_loss/global_norm/L2Loss_6"
  input: "optimizer_loss/global_norm/L2Loss_7"
  input: "optimizer_loss/global_norm/L2Loss_8"
  input: "optimizer_loss/global_norm/L2Loss_9"
  input: "optimizer_loss/global_norm/L2Loss_10"
  input: "optimizer_loss/global_norm/L2Loss_11"
  input: "optimizer_loss/global_norm/L2Loss_12"
  input: "optimizer_loss/global_norm/L2Loss_13"
  input: "optimizer_loss/global_norm/L2Loss_14"
  input: "optimizer_loss/global_norm/L2Loss_15"
  input: "optimizer_loss/global_norm/L2Loss_16"
  input: "optimizer_loss/global_norm/L2Loss_17"
  attr {
    key: "N"
    value {
      i: 18
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "optimizer_loss/global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/Sum"
  op: "Sum"
  input: "optimizer_loss/global_norm/stack"
  input: "optimizer_loss/global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/global_norm/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/mul"
  op: "Mul"
  input: "optimizer_loss/global_norm/Sum"
  input: "optimizer_loss/global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/global_norm"
  op: "Sqrt"
  input: "optimizer_loss/global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/gradient_norm/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "optimizer_loss/global_norm/gradient_norm"
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/gradient_norm"
  op: "ScalarSummary"
  input: "optimizer_loss/global_norm/gradient_norm/tags"
  input: "optimizer_loss/global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_1"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_2"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_3"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_4"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_5"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_6"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_7"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_8"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_9"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_10"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_11"
  op: "L2Loss"
  input: "optimizer_loss/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_12"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_13"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_14"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_15"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_16"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/L2Loss_17"
  op: "L2Loss"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/stack"
  op: "Pack"
  input: "optimizer_loss/global_norm_1/L2Loss"
  input: "optimizer_loss/global_norm_1/L2Loss_1"
  input: "optimizer_loss/global_norm_1/L2Loss_2"
  input: "optimizer_loss/global_norm_1/L2Loss_3"
  input: "optimizer_loss/global_norm_1/L2Loss_4"
  input: "optimizer_loss/global_norm_1/L2Loss_5"
  input: "optimizer_loss/global_norm_1/L2Loss_6"
  input: "optimizer_loss/global_norm_1/L2Loss_7"
  input: "optimizer_loss/global_norm_1/L2Loss_8"
  input: "optimizer_loss/global_norm_1/L2Loss_9"
  input: "optimizer_loss/global_norm_1/L2Loss_10"
  input: "optimizer_loss/global_norm_1/L2Loss_11"
  input: "optimizer_loss/global_norm_1/L2Loss_12"
  input: "optimizer_loss/global_norm_1/L2Loss_13"
  input: "optimizer_loss/global_norm_1/L2Loss_14"
  input: "optimizer_loss/global_norm_1/L2Loss_15"
  input: "optimizer_loss/global_norm_1/L2Loss_16"
  input: "optimizer_loss/global_norm_1/L2Loss_17"
  attr {
    key: "N"
    value {
      i: 18
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/Sum"
  op: "Sum"
  input: "optimizer_loss/global_norm_1/stack"
  input: "optimizer_loss/global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/mul"
  op: "Mul"
  input: "optimizer_loss/global_norm_1/Sum"
  input: "optimizer_loss/global_norm_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_1/global_norm"
  op: "Sqrt"
  input: "optimizer_loss/global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "optimizer_loss/clip_by_global_norm/truediv/x"
  input: "optimizer_loss/global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 20.0
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "optimizer_loss/clip_by_global_norm/Const"
  input: "optimizer_loss/clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "optimizer_loss/clip_by_global_norm/truediv"
  input: "optimizer_loss/clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 20.0
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul"
  op: "Mul"
  input: "optimizer_loss/clip_by_global_norm/mul/x"
  input: "optimizer_loss/clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/IsFinite"
  op: "IsFinite"
  input: "optimizer_loss/global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: nan
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/Select"
  op: "Select"
  input: "optimizer_loss/clip_by_global_norm/IsFinite"
  input: "optimizer_loss/clip_by_global_norm/mul"
  input: "optimizer_loss/clip_by_global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_1"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_0"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_2"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/conv_1/add_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_1"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_3"
  op: "Mul"
  input: "optimizer_loss/gradients/AddN_12"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_2"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_4"
  op: "Mul"
  input: "optimizer_loss/gradients/AddN_11"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_3"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_5"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_4"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_6"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/conv_2/add_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_5"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_7"
  op: "Mul"
  input: "optimizer_loss/gradients/AddN_8"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_6"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_8"
  op: "Mul"
  input: "optimizer_loss/gradients/AddN_7"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_7"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_9"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_8"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_10"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/conv_3/add_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_9"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_11"
  op: "Mul"
  input: "optimizer_loss/gradients/AddN_4"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_10"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_12"
  op: "Mul"
  input: "optimizer_loss/gradients/AddN_3"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_11"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_13"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_12"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_14"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_13"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_15"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_14"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_16"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_15"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_17"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_16"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/mul_18"
  op: "Mul"
  input: "optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1"
  input: "optimizer_loss/clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_17"
  op: "Identity"
  input: "optimizer_loss/clip_by_global_norm/mul_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "optimizer_loss/loss"
      }
    }
  }
}
node {
  name: "optimizer_loss/loss"
  op: "ScalarSummary"
  input: "optimizer_loss/loss/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_1"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_2"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_3"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_1/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_4"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_5"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_6"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_7"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_2/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_8"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_9"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_10"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_2_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_11"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/conv_3/BatchNorm/cond/FusedBatchNormV3_1/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_12"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_13"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_14"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_15"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_16"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/L2Loss_17"
  op: "L2Loss"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/gradients/Classifier/fully_connected_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/stack"
  op: "Pack"
  input: "optimizer_loss/global_norm_2/L2Loss"
  input: "optimizer_loss/global_norm_2/L2Loss_1"
  input: "optimizer_loss/global_norm_2/L2Loss_2"
  input: "optimizer_loss/global_norm_2/L2Loss_3"
  input: "optimizer_loss/global_norm_2/L2Loss_4"
  input: "optimizer_loss/global_norm_2/L2Loss_5"
  input: "optimizer_loss/global_norm_2/L2Loss_6"
  input: "optimizer_loss/global_norm_2/L2Loss_7"
  input: "optimizer_loss/global_norm_2/L2Loss_8"
  input: "optimizer_loss/global_norm_2/L2Loss_9"
  input: "optimizer_loss/global_norm_2/L2Loss_10"
  input: "optimizer_loss/global_norm_2/L2Loss_11"
  input: "optimizer_loss/global_norm_2/L2Loss_12"
  input: "optimizer_loss/global_norm_2/L2Loss_13"
  input: "optimizer_loss/global_norm_2/L2Loss_14"
  input: "optimizer_loss/global_norm_2/L2Loss_15"
  input: "optimizer_loss/global_norm_2/L2Loss_16"
  input: "optimizer_loss/global_norm_2/L2Loss_17"
  attr {
    key: "N"
    value {
      i: 18
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/Sum"
  op: "Sum"
  input: "optimizer_loss/global_norm_2/stack"
  input: "optimizer_loss/global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/mul"
  op: "Mul"
  input: "optimizer_loss/global_norm_2/Sum"
  input: "optimizer_loss/global_norm_2/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm_2/global_norm"
  op: "Sqrt"
  input: "optimizer_loss/global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/clipped_gradient_norm/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "optimizer_loss/global_norm/clipped_gradient_norm"
      }
    }
  }
}
node {
  name: "optimizer_loss/global_norm/clipped_gradient_norm"
  op: "ScalarSummary"
  input: "optimizer_loss/global_norm/clipped_gradient_norm/tags"
  input: "optimizer_loss/global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "optimizer_loss/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/beta1_power/Assign"
  op: "Assign"
  input: "optimizer_loss/beta1_power"
  input: "optimizer_loss/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/beta1_power/read"
  op: "Identity"
  input: "optimizer_loss/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "optimizer_loss/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/beta2_power/Assign"
  op: "Assign"
  input: "optimizer_loss/beta2_power"
  input: "optimizer_loss/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/beta2_power/read"
  op: "Identity"
  input: "optimizer_loss/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/conv_1/w/Adam/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/conv_1/w/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/w/Adam"
  input: "optimizer_loss/Classifier/conv_1/w/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_1/w/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/w/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/biases/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/biases/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/biases/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/biases/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\030\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/conv_2/w/Adam/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/conv_2/w/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 24
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/w/Adam"
  input: "optimizer_loss/Classifier/conv_2/w/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_2/w/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\030\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 24
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/w/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/biases/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/biases/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/biases/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/biases/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\030\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/conv_3/w/Adam/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/conv_3/w/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 24
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/w/Adam"
  input: "optimizer_loss/Classifier/conv_3/w/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_3/w/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\030\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 24
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/w/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/biases/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/biases/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/biases/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/biases/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\213\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 395
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\213\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 395
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/biases/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/biases/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/biases/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected/biases/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/biases/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/biases/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/biases/Adam/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/biases/Adam/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1/Assign"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1/read"
  op: "Identity"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/train/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "optimizer_loss/train/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "optimizer_loss/train/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_1/w/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_1/w"
  input: "optimizer_loss/Classifier/conv_1/w/Adam"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_1/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_1/biases"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_1/BatchNorm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_1/BatchNorm/beta"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_1/BatchNorm/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_1/BatchNorm/gamma"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_2/w/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_2/w"
  input: "optimizer_loss/Classifier/conv_2/w/Adam"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_2/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_2/biases"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_2/BatchNorm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_2/BatchNorm/beta"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_2/BatchNorm/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_2/BatchNorm/gamma"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_3/w/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_3/w"
  input: "optimizer_loss/Classifier/conv_3/w/Adam"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_3/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_3/biases"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_3/BatchNorm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_3/BatchNorm/beta"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/conv_3/BatchNorm/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/conv_3/BatchNorm/gamma"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/fully_connected/weights"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/fully_connected/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/fully_connected/biases"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/fully_connected_1/weights"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/fully_connected_1/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/fully_connected_1/biases"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/fully_connected_2/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/fully_connected_2/weights"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/update_Classifier/fully_connected_2/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "Classifier/fully_connected_2/biases"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/learning_rate/read"
  input: "optimizer_loss/train/beta1"
  input: "optimizer_loss/train/beta2"
  input: "optimizer_loss/train/epsilon"
  input: "optimizer_loss/clip_by_global_norm/optimizer_loss/clip_by_global_norm/_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/train/mul"
  op: "Mul"
  input: "optimizer_loss/beta1_power/read"
  input: "optimizer_loss/train/beta1"
  input: "^optimizer_loss/train/update_Classifier/conv_1/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected/weights/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_1/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_1/weights/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_2/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_2/weights/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/train/Assign"
  op: "Assign"
  input: "optimizer_loss/beta1_power"
  input: "optimizer_loss/train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/train/mul_1"
  op: "Mul"
  input: "optimizer_loss/beta2_power/read"
  input: "optimizer_loss/train/beta2"
  input: "^optimizer_loss/train/update_Classifier/conv_1/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected/weights/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_1/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_1/weights/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_2/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_2/weights/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "optimizer_loss/train/Assign_1"
  op: "Assign"
  input: "optimizer_loss/beta2_power"
  input: "optimizer_loss/train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer_loss/train/update"
  op: "NoOp"
  input: "^optimizer_loss/train/Assign"
  input: "^optimizer_loss/train/Assign_1"
  input: "^optimizer_loss/train/update_Classifier/conv_1/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_1/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_2/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/BatchNorm/beta/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/BatchNorm/gamma/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/conv_3/w/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected/weights/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_1/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_1/weights/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_2/biases/ApplyAdam"
  input: "^optimizer_loss/train/update_Classifier/fully_connected_2/weights/ApplyAdam"
}
node {
  name: "optimizer_loss/train/value"
  op: "Const"
  input: "^optimizer_loss/train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "optimizer_loss/train"
  op: "AssignAdd"
  input: "global_step"
  input: "optimizer_loss/train/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer_loss/control_dependency"
  op: "Identity"
  input: "Mean"
  input: "^optimizer_loss/train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "accuracy"
  input: "loss"
  input: "optimizer_loss/global_norm/gradient_norm"
  input: "optimizer_loss/loss"
  input: "optimizer_loss/global_norm/clipped_gradient_norm"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 64
          }
        }
        string_val: "Classifier/conv_1/BatchNorm/beta"
        string_val: "Classifier/conv_1/BatchNorm/gamma"
        string_val: "Classifier/conv_1/BatchNorm/moving_mean"
        string_val: "Classifier/conv_1/BatchNorm/moving_variance"
        string_val: "Classifier/conv_1/biases"
        string_val: "Classifier/conv_1/w"
        string_val: "Classifier/conv_2/BatchNorm/beta"
        string_val: "Classifier/conv_2/BatchNorm/gamma"
        string_val: "Classifier/conv_2/BatchNorm/moving_mean"
        string_val: "Classifier/conv_2/BatchNorm/moving_variance"
        string_val: "Classifier/conv_2/biases"
        string_val: "Classifier/conv_2/w"
        string_val: "Classifier/conv_3/BatchNorm/beta"
        string_val: "Classifier/conv_3/BatchNorm/gamma"
        string_val: "Classifier/conv_3/BatchNorm/moving_mean"
        string_val: "Classifier/conv_3/BatchNorm/moving_variance"
        string_val: "Classifier/conv_3/biases"
        string_val: "Classifier/conv_3/w"
        string_val: "Classifier/fully_connected/biases"
        string_val: "Classifier/fully_connected/weights"
        string_val: "Classifier/fully_connected_1/biases"
        string_val: "Classifier/fully_connected_1/weights"
        string_val: "Classifier/fully_connected_2/biases"
        string_val: "Classifier/fully_connected_2/weights"
        string_val: "global_step"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/w/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/w/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/w/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
        string_val: "optimizer_loss/beta1_power"
        string_val: "optimizer_loss/beta2_power"
        string_val: "optimizer_loss/learning_rate"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 64
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Classifier/conv_1/BatchNorm/beta"
  input: "Classifier/conv_1/BatchNorm/gamma"
  input: "Classifier/conv_1/BatchNorm/moving_mean"
  input: "Classifier/conv_1/BatchNorm/moving_variance"
  input: "Classifier/conv_1/biases"
  input: "Classifier/conv_1/w"
  input: "Classifier/conv_2/BatchNorm/beta"
  input: "Classifier/conv_2/BatchNorm/gamma"
  input: "Classifier/conv_2/BatchNorm/moving_mean"
  input: "Classifier/conv_2/BatchNorm/moving_variance"
  input: "Classifier/conv_2/biases"
  input: "Classifier/conv_2/w"
  input: "Classifier/conv_3/BatchNorm/beta"
  input: "Classifier/conv_3/BatchNorm/gamma"
  input: "Classifier/conv_3/BatchNorm/moving_mean"
  input: "Classifier/conv_3/BatchNorm/moving_variance"
  input: "Classifier/conv_3/biases"
  input: "Classifier/conv_3/w"
  input: "Classifier/fully_connected/biases"
  input: "Classifier/fully_connected/weights"
  input: "Classifier/fully_connected_1/biases"
  input: "Classifier/fully_connected_1/weights"
  input: "Classifier/fully_connected_2/biases"
  input: "Classifier/fully_connected_2/weights"
  input: "global_step"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
  input: "optimizer_loss/Classifier/conv_1/w/Adam"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
  input: "optimizer_loss/Classifier/conv_2/w/Adam"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
  input: "optimizer_loss/Classifier/conv_3/w/Adam"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
  input: "optimizer_loss/beta1_power"
  input: "optimizer_loss/beta2_power"
  input: "optimizer_loss/learning_rate"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 64
          }
        }
        string_val: "Classifier/conv_1/BatchNorm/beta"
        string_val: "Classifier/conv_1/BatchNorm/gamma"
        string_val: "Classifier/conv_1/BatchNorm/moving_mean"
        string_val: "Classifier/conv_1/BatchNorm/moving_variance"
        string_val: "Classifier/conv_1/biases"
        string_val: "Classifier/conv_1/w"
        string_val: "Classifier/conv_2/BatchNorm/beta"
        string_val: "Classifier/conv_2/BatchNorm/gamma"
        string_val: "Classifier/conv_2/BatchNorm/moving_mean"
        string_val: "Classifier/conv_2/BatchNorm/moving_variance"
        string_val: "Classifier/conv_2/biases"
        string_val: "Classifier/conv_2/w"
        string_val: "Classifier/conv_3/BatchNorm/beta"
        string_val: "Classifier/conv_3/BatchNorm/gamma"
        string_val: "Classifier/conv_3/BatchNorm/moving_mean"
        string_val: "Classifier/conv_3/BatchNorm/moving_variance"
        string_val: "Classifier/conv_3/biases"
        string_val: "Classifier/conv_3/w"
        string_val: "Classifier/fully_connected/biases"
        string_val: "Classifier/fully_connected/weights"
        string_val: "Classifier/fully_connected_1/biases"
        string_val: "Classifier/fully_connected_1/weights"
        string_val: "Classifier/fully_connected_2/biases"
        string_val: "Classifier/fully_connected_2/weights"
        string_val: "global_step"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/w/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/w/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/w/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
        string_val: "optimizer_loss/beta1_power"
        string_val: "optimizer_loss/beta2_power"
        string_val: "optimizer_loss/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 64
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Classifier/conv_1/BatchNorm/beta"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "Classifier/conv_1/BatchNorm/gamma"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "Classifier/conv_1/BatchNorm/moving_mean"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "Classifier/conv_1/BatchNorm/moving_variance"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "Classifier/conv_1/biases"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "Classifier/conv_1/w"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "Classifier/conv_2/BatchNorm/beta"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "Classifier/conv_2/BatchNorm/gamma"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "Classifier/conv_2/BatchNorm/moving_mean"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "Classifier/conv_2/BatchNorm/moving_variance"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "Classifier/conv_2/biases"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "Classifier/conv_2/w"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "Classifier/conv_3/BatchNorm/beta"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "Classifier/conv_3/BatchNorm/gamma"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "Classifier/conv_3/BatchNorm/moving_mean"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "Classifier/conv_3/BatchNorm/moving_variance"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "Classifier/conv_3/biases"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "Classifier/conv_3/w"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "Classifier/fully_connected/biases"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "Classifier/fully_connected/weights"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "Classifier/fully_connected_1/biases"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "Classifier/fully_connected_1/weights"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "Classifier/fully_connected_2/biases"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "Classifier/fully_connected_2/weights"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/w/Adam"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/w/Adam"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/w/Adam"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 24
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 395
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "optimizer_loss/beta1_power"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "optimizer_loss/beta2_power"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "optimizer_loss/learning_rate"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Classifier/conv_1/w"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "Classifier/conv_1/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "Classifier/conv_1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "Classifier/conv_1/BatchNorm/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "Classifier/conv_1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "Classifier/conv_1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "Classifier/conv_2/w"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "Classifier/conv_2/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "Classifier/conv_2/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Classifier/conv_2/BatchNorm/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Classifier/conv_2/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Classifier/conv_2/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Classifier/conv_3/w"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "Classifier/conv_3/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "Classifier/conv_3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "Classifier/conv_3/BatchNorm/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "Classifier/conv_3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Classifier/conv_3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "Classifier/fully_connected/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Classifier/fully_connected/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Classifier/fully_connected_1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Classifier/fully_connected_1/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "Classifier/fully_connected_2/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "Classifier/fully_connected_2/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "optimizer_loss/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer_loss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "optimizer_loss/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "optimizer_loss/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_1/w/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_1/w/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_2/w/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_2/w/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_3/w/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_3/w/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Classifier/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 64
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 64
          }
        }
        string_val: "Classifier/conv_1/w"
        string_val: "Classifier/conv_1/biases"
        string_val: "Classifier/conv_1/BatchNorm/beta"
        string_val: "Classifier/conv_1/BatchNorm/gamma"
        string_val: "Classifier/conv_1/BatchNorm/moving_mean"
        string_val: "Classifier/conv_1/BatchNorm/moving_variance"
        string_val: "Classifier/conv_2/w"
        string_val: "Classifier/conv_2/biases"
        string_val: "Classifier/conv_2/BatchNorm/beta"
        string_val: "Classifier/conv_2/BatchNorm/gamma"
        string_val: "Classifier/conv_2/BatchNorm/moving_mean"
        string_val: "Classifier/conv_2/BatchNorm/moving_variance"
        string_val: "Classifier/conv_3/w"
        string_val: "Classifier/conv_3/biases"
        string_val: "Classifier/conv_3/BatchNorm/beta"
        string_val: "Classifier/conv_3/BatchNorm/gamma"
        string_val: "Classifier/conv_3/BatchNorm/moving_mean"
        string_val: "Classifier/conv_3/BatchNorm/moving_variance"
        string_val: "Classifier/fully_connected/weights"
        string_val: "Classifier/fully_connected/biases"
        string_val: "Classifier/fully_connected_1/weights"
        string_val: "Classifier/fully_connected_1/biases"
        string_val: "Classifier/fully_connected_2/weights"
        string_val: "Classifier/fully_connected_2/biases"
        string_val: "global_step"
        string_val: "optimizer_loss/learning_rate"
        string_val: "optimizer_loss/beta1_power"
        string_val: "optimizer_loss/beta2_power"
        string_val: "optimizer_loss/Classifier/conv_1/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/w/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/w/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/w/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/w/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/biases/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam"
        string_val: "optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected/weights/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_1/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_1/weights/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_1/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_1/biases/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_2/weights/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_2/weights/Adam_1"
        string_val: "optimizer_loss/Classifier/fully_connected_2/biases/Adam"
        string_val: "optimizer_loss/Classifier/fully_connected_2/biases/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Classifier/conv_1/BatchNorm/beta/Assign"
  input: "^Classifier/conv_1/BatchNorm/gamma/Assign"
  input: "^Classifier/conv_1/BatchNorm/moving_mean/Assign"
  input: "^Classifier/conv_1/BatchNorm/moving_variance/Assign"
  input: "^Classifier/conv_1/biases/Assign"
  input: "^Classifier/conv_1/w/Assign"
  input: "^Classifier/conv_2/BatchNorm/beta/Assign"
  input: "^Classifier/conv_2/BatchNorm/gamma/Assign"
  input: "^Classifier/conv_2/BatchNorm/moving_mean/Assign"
  input: "^Classifier/conv_2/BatchNorm/moving_variance/Assign"
  input: "^Classifier/conv_2/biases/Assign"
  input: "^Classifier/conv_2/w/Assign"
  input: "^Classifier/conv_3/BatchNorm/beta/Assign"
  input: "^Classifier/conv_3/BatchNorm/gamma/Assign"
  input: "^Classifier/conv_3/BatchNorm/moving_mean/Assign"
  input: "^Classifier/conv_3/BatchNorm/moving_variance/Assign"
  input: "^Classifier/conv_3/biases/Assign"
  input: "^Classifier/conv_3/w/Assign"
  input: "^Classifier/fully_connected/biases/Assign"
  input: "^Classifier/fully_connected/weights/Assign"
  input: "^Classifier/fully_connected_1/biases/Assign"
  input: "^Classifier/fully_connected_1/weights/Assign"
  input: "^Classifier/fully_connected_2/biases/Assign"
  input: "^Classifier/fully_connected_2/weights/Assign"
  input: "^global_step/Assign"
  input: "^optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_1/BatchNorm/beta/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_1/BatchNorm/gamma/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_1/biases/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_1/biases/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_1/w/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_1/w/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_2/BatchNorm/beta/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_2/BatchNorm/gamma/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_2/biases/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_2/biases/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_2/w/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_2/w/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_3/BatchNorm/beta/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_3/BatchNorm/gamma/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_3/biases/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_3/biases/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/conv_3/w/Adam/Assign"
  input: "^optimizer_loss/Classifier/conv_3/w/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/fully_connected/biases/Adam/Assign"
  input: "^optimizer_loss/Classifier/fully_connected/biases/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/fully_connected/weights/Adam/Assign"
  input: "^optimizer_loss/Classifier/fully_connected/weights/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/fully_connected_1/biases/Adam/Assign"
  input: "^optimizer_loss/Classifier/fully_connected_1/biases/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/fully_connected_1/weights/Adam/Assign"
  input: "^optimizer_loss/Classifier/fully_connected_1/weights/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/fully_connected_2/biases/Adam/Assign"
  input: "^optimizer_loss/Classifier/fully_connected_2/biases/Adam_1/Assign"
  input: "^optimizer_loss/Classifier/fully_connected_2/weights/Adam/Assign"
  input: "^optimizer_loss/Classifier/fully_connected_2/weights/Adam_1/Assign"
  input: "^optimizer_loss/beta1_power/Assign"
  input: "^optimizer_loss/beta2_power/Assign"
  input: "^optimizer_loss/learning_rate/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
library {
  function {
    signature {
      name: "__inference_Dataset_from_generator_generator_next_fn_75"
      input_arg {
        name: "args_0"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "args_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_4"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "PyFunc:output:1"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "PyFunc:output:2"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_from_generator_get_iterator_id_fn_66"
      input_arg {
        name: "args_0"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      attr {
        key: "Tin"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_3"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_from_generator_generator_next_fn_18"
      input_arg {
        name: "args_0"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "args_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_1"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "PyFunc:output:1"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "PyFunc:output:2"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_from_generator_finalize_fn_80"
      input_arg {
        name: "args_0"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "args_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_5"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "_make_dataset_e0RaFbPjm6s"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/normalize_element/component_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/TensorDataset"
      op: "TensorDataset"
      input: "OptimizeDataset/inputs_1/normalize_element/component_0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/FlatMapDataset"
      op: "FlatMapDataset"
      input: "OptimizeDataset/inputs_1/TensorDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_flat_map_flat_map_fn_83"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/RepeatDataset"
      op: "RepeatDataset"
      input: "OptimizeDataset/inputs_1/FlatMapDataset:handle:0"
      input: "OptimizeDataset/inputs_1/count:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 512
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/ShuffleDataset"
      op: "ShuffleDataset"
      input: "OptimizeDataset/inputs_1/RepeatDataset:handle:0"
      input: "OptimizeDataset/inputs_1/buffer_size:output:0"
      input: "OptimizeDataset/inputs_1/seed:output:0"
      input: "OptimizeDataset/inputs_1/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 64
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/drop_remainder"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs_1/BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "OptimizeDataset/inputs_1/ShuffleDataset:handle:0"
      input: "OptimizeDataset/inputs_1/batch_size:output:0"
      input: "OptimizeDataset/inputs_1/drop_remainder:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "parallel_copy"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "OptimizeDataset/inputs_1/BatchDatasetV2:handle:0"
      input: "optimizations:output:0"
      attr {
        key: "optimization_configs"
        value {
          list {
            s: "map_vectorization:use_choose_fastest:false"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      attr {
        key: "algorithm"
        value {
          i: 0
        }
      }
      attr {
        key: "cpu_budget"
        value {
          i: 0
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_from_generator_get_iterator_id_fn_9"
      input_arg {
        name: "args_0"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      attr {
        key: "Tin"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_0"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "_make_dataset_DyWsUD1FZwI"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/normalize_element/component_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/TensorDataset"
      op: "TensorDataset"
      input: "OptimizeDataset/inputs/normalize_element/component_0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/FlatMapDataset"
      op: "FlatMapDataset"
      input: "OptimizeDataset/inputs/TensorDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_flat_map_flat_map_fn_26"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/RepeatDataset"
      op: "RepeatDataset"
      input: "OptimizeDataset/inputs/FlatMapDataset:handle:0"
      input: "OptimizeDataset/inputs/count:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 512
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/ShuffleDataset"
      op: "ShuffleDataset"
      input: "OptimizeDataset/inputs/RepeatDataset:handle:0"
      input: "OptimizeDataset/inputs/buffer_size:output:0"
      input: "OptimizeDataset/inputs/seed:output:0"
      input: "OptimizeDataset/inputs/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 64
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/drop_remainder"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/inputs/BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "OptimizeDataset/inputs/ShuffleDataset:handle:0"
      input: "OptimizeDataset/inputs/batch_size:output:0"
      input: "OptimizeDataset/inputs/drop_remainder:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "parallel_copy"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "OptimizeDataset/inputs/BatchDatasetV2:handle:0"
      input: "optimizations:output:0"
      attr {
        key: "optimization_configs"
        value {
          list {
            s: "map_vectorization:use_choose_fastest:false"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      attr {
        key: "algorithm"
        value {
          i: 0
        }
      }
      attr {
        key: "cpu_budget"
        value {
          i: 0
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_flat_map_fn_26"
      input_arg {
        name: "args_0"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "GeneratorDataset"
    }
    node_def {
      name: "GeneratorDataset"
      op: "GeneratorDataset"
      input: "args_0"
      attr {
        key: "Tfinalize_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tinit_func_args"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "Tnext_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "finalize_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_finalize_fn_23"
          }
        }
      }
      attr {
        key: "init_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_get_iterator_id_fn_9"
          }
        }
      }
      attr {
        key: "next_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_generator_next_fn_18"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "GeneratorDataset:handle:0"
      input: "^GeneratorDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "GeneratorDataset"
      value: "GeneratorDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_from_generator_finalize_fn_23"
      input_arg {
        name: "args_0"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "PyFunc"
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "args_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_2"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PyFunc:output:0"
      input: "^PyFunc"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    control_ret {
      key: "PyFunc"
      value: "PyFunc"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_flat_map_fn_83"
      input_arg {
        name: "args_0"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "GeneratorDataset"
    }
    node_def {
      name: "GeneratorDataset"
      op: "GeneratorDataset"
      input: "args_0"
      attr {
        key: "Tfinalize_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tinit_func_args"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "Tnext_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "finalize_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_finalize_fn_80"
          }
        }
      }
      attr {
        key: "init_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_get_iterator_id_fn_66"
          }
        }
      }
      attr {
        key: "next_func"
        value {
          func {
            name: "__inference_Dataset_from_generator_generator_next_fn_75"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "GeneratorDataset:handle:0"
      input: "^GeneratorDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "GeneratorDataset"
      value: "GeneratorDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
}
versions {
  producer: 134
  min_consumer: 12
}
